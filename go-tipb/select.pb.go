// Code generated by protoc-gen-go.
// source: select.proto
// DO NOT EDIT!

package tipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// KeyRange is the encoded index key range, low is closed, high is open. (low <= x < high)
type KeyRange struct {
	Low              []byte `protobuf:"bytes,1,opt,name=low" json:"low,omitempty"`
	High             []byte `protobuf:"bytes,2,opt,name=high" json:"high,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeyRange) Reset()                    { *m = KeyRange{} }
func (m *KeyRange) String() string            { return proto.CompactTextString(m) }
func (*KeyRange) ProtoMessage()               {}
func (*KeyRange) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *KeyRange) GetLow() []byte {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *KeyRange) GetHigh() []byte {
	if m != nil {
		return m.High
	}
	return nil
}

// ByItem type for group by and order by.
type ByItem struct {
	Expr             *Expr  `protobuf:"bytes,1,opt,name=expr" json:"expr,omitempty"`
	Desc             *bool  `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ByItem) Reset()                    { *m = ByItem{} }
func (m *ByItem) String() string            { return proto.CompactTextString(m) }
func (*ByItem) ProtoMessage()               {}
func (*ByItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ByItem) GetExpr() *Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *ByItem) GetDesc() bool {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return false
}

// SelectRequest works like a simplified select statement.
type SelectRequest struct {
	// transaction start timestamp.
	StartTs *int64 `protobuf:"varint,1,opt,name=start_ts" json:"start_ts,omitempty"`
	// If table_info is not null, it represents a table scan, index_info would be null.
	TableInfo *TableInfo `protobuf:"bytes,2,opt,name=table_info" json:"table_info,omitempty"`
	// If index_info is not null, it represents an index scan, table_info would be null.
	IndexInfo *IndexInfo `protobuf:"bytes,3,opt,name=index_info" json:"index_info,omitempty"`
	// fields to be selected, fields type can be column reference for simple scan.
	// or aggregation function. If no fields specified, only handle will be returned.
	Fields []*Expr `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
	// disjoint handle ranges to be scanned.
	Ranges []*KeyRange `protobuf:"bytes,5,rep,name=ranges" json:"ranges,omitempty"`
	// distinct result.
	Distinct *bool `protobuf:"varint,6,opt,name=distinct" json:"distinct,omitempty"`
	// where condition.
	Where *Expr `protobuf:"bytes,7,opt,name=where" json:"where,omitempty"`
	// group by clause.
	GroupBy []*ByItem `protobuf:"bytes,8,rep,name=group_by" json:"group_by,omitempty"`
	// having clause.
	Having *Expr `protobuf:"bytes,9,opt,name=having" json:"having,omitempty"`
	// order by clause.
	OrderBy []*ByItem `protobuf:"bytes,10,rep,name=order_by" json:"order_by,omitempty"`
	// limit the result to be returned.
	Limit            *int64 `protobuf:"varint,12,opt,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SelectRequest) GetStartTs() int64 {
	if m != nil && m.StartTs != nil {
		return *m.StartTs
	}
	return 0
}

func (m *SelectRequest) GetTableInfo() *TableInfo {
	if m != nil {
		return m.TableInfo
	}
	return nil
}

func (m *SelectRequest) GetIndexInfo() *IndexInfo {
	if m != nil {
		return m.IndexInfo
	}
	return nil
}

func (m *SelectRequest) GetFields() []*Expr {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *SelectRequest) GetRanges() []*KeyRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *SelectRequest) GetDistinct() bool {
	if m != nil && m.Distinct != nil {
		return *m.Distinct
	}
	return false
}

func (m *SelectRequest) GetWhere() *Expr {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *SelectRequest) GetGroupBy() []*ByItem {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *SelectRequest) GetHaving() *Expr {
	if m != nil {
		return m.Having
	}
	return nil
}

func (m *SelectRequest) GetOrderBy() []*ByItem {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SelectRequest) GetLimit() int64 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

// values are all in text format.
type Row struct {
	Handle           []byte `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	Data             []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Row) GetHandle() []byte {
	if m != nil {
		return m.Handle
	}
	return nil
}

func (m *Row) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Error struct {
	Code             *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg              *string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Error) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Error) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// Response for SelectRequest.
type SelectResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Result rows.
	Rows             []*Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SelectResponse) Reset()                    { *m = SelectResponse{} }
func (m *SelectResponse) String() string            { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()               {}
func (*SelectResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *SelectResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SelectResponse) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyRange)(nil), "tipb.KeyRange")
	proto.RegisterType((*ByItem)(nil), "tipb.ByItem")
	proto.RegisterType((*SelectRequest)(nil), "tipb.SelectRequest")
	proto.RegisterType((*Row)(nil), "tipb.Row")
	proto.RegisterType((*Error)(nil), "tipb.Error")
	proto.RegisterType((*SelectResponse)(nil), "tipb.SelectResponse")
}

var fileDescriptor2 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x6b, 0xdc, 0x30,
	0x14, 0x64, 0x63, 0x7b, 0xeb, 0x7d, 0x76, 0xb6, 0x41, 0x50, 0xaa, 0xec, 0x21, 0x04, 0x87, 0x42,
	0x4f, 0xa6, 0xe4, 0x27, 0x04, 0xf6, 0xb0, 0xf4, 0x52, 0xb6, 0xbd, 0x2f, 0xb2, 0xf5, 0x62, 0x0b,
	0x6c, 0xc9, 0x95, 0x94, 0x3a, 0xfb, 0xeb, 0xfa, 0xd7, 0xaa, 0x0f, 0xf7, 0x83, 0x26, 0x47, 0xcd,
	0x9b, 0x19, 0xcd, 0x7b, 0x03, 0xa5, 0xc1, 0x01, 0x5b, 0x5b, 0x4f, 0x5a, 0x59, 0x45, 0x52, 0x2b,
	0xa6, 0x66, 0x77, 0x85, 0xcf, 0x93, 0x46, 0x63, 0x84, 0x92, 0x11, 0xdf, 0x95, 0xa6, 0xed, 0x71,
	0x64, 0xf1, 0x55, 0x7d, 0x80, 0xfc, 0x33, 0x9e, 0x8f, 0x4c, 0x76, 0x48, 0x0a, 0x48, 0x06, 0x35,
	0xd3, 0xd5, 0xed, 0xea, 0x63, 0x49, 0x4a, 0x48, 0x7b, 0xd1, 0xf5, 0xf4, 0xc2, 0xbf, 0xaa, 0x4f,
	0xb0, 0x7e, 0x38, 0x1f, 0x2c, 0x8e, 0x84, 0x42, 0xea, 0x2d, 0x03, 0xab, 0xb8, 0x87, 0xda, 0xff,
	0x52, 0xef, 0x1d, 0xe2, 0x15, 0x1c, 0x4d, 0x1b, 0x14, 0x79, 0xf5, 0xf3, 0x02, 0x2e, 0xbf, 0x86,
	0x3c, 0x47, 0xfc, 0xfe, 0x84, 0xc6, 0x92, 0x2b, 0xc8, 0x8d, 0x65, 0xda, 0x9e, 0xac, 0x09, 0xea,
	0x84, 0xdc, 0x01, 0x58, 0xd6, 0x0c, 0x78, 0x12, 0xf2, 0x51, 0x05, 0x5d, 0x71, 0xff, 0x36, 0x3a,
	0x7e, 0xf3, 0xf8, 0xc1, 0xc1, 0x9e, 0x24, 0x24, 0xc7, 0xe7, 0x48, 0x4a, 0xfe, 0x25, 0x1d, 0x3c,
	0x1e, 0x48, 0x3b, 0x58, 0x3f, 0x0a, 0x1c, 0xb8, 0xa1, 0xe9, 0x6d, 0xf2, 0x5f, 0xae, 0x1b, 0x58,
	0x6b, 0xbf, 0x9f, 0xa1, 0x59, 0x98, 0x6d, 0xe3, 0xec, 0xcf, 0xda, 0x2e, 0x17, 0x17, 0xc6, 0x0a,
	0xd9, 0x5a, 0xba, 0xf6, 0xd9, 0xc9, 0x35, 0x64, 0x73, 0x8f, 0x1a, 0xe9, 0x9b, 0x17, 0x4b, 0xde,
	0x40, 0xde, 0x69, 0xf5, 0x34, 0x9d, 0x9a, 0x33, 0xcd, 0x83, 0x5d, 0x19, 0xa7, 0xcb, 0x79, 0x5c,
	0x90, 0x9e, 0xfd, 0x10, 0xb2, 0xa3, 0x9b, 0xd7, 0xb4, 0x4a, 0x73, 0xd4, 0x5e, 0x0b, 0xaf, 0x68,
	0x2f, 0x21, 0x1b, 0xc4, 0x28, 0x2c, 0x2d, 0xfd, 0x75, 0xaa, 0x3b, 0x48, 0x8e, 0x6a, 0x26, 0x5b,
	0xef, 0x28, 0xf9, 0x80, 0x7f, 0x8b, 0xe1, 0xcc, 0xb2, 0xa5, 0x98, 0x0a, 0xb2, 0xbd, 0xd6, 0x2a,
	0x5c, 0xbf, 0x55, 0x3c, 0x92, 0x32, 0x5f, 0xe5, 0x68, 0xba, 0xc0, 0xd9, 0x54, 0x7b, 0xd8, 0xfe,
	0x6e, 0xc2, 0x4c, 0x4a, 0x1a, 0x74, 0x29, 0x33, 0xf4, 0xaa, 0xa5, 0xc5, 0x62, 0x09, 0x19, 0x8c,
	0xde, 0x43, 0xaa, 0xd5, 0x6c, 0x9c, 0xd6, 0x27, 0xdc, 0xc4, 0x91, 0x0b, 0xf2, 0x70, 0x0d, 0xef,
	0x5a, 0x35, 0xd6, 0x93, 0x5b, 0xae, 0x65, 0x93, 0xc3, 0x79, 0x13, 0x86, 0x5f, 0x56, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x6f, 0x8b, 0x59, 0xe6, 0x7a, 0x02, 0x00, 0x00,
}
