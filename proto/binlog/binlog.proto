syntax = "proto2";

package binlog;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// TableMutation contains mutations in a table.
message TableMutation {
    optional int64 table_id      = 1 [(gogoproto.nullable) = false];

    // For inserted rows and updated rows, we save all column values of the row.
    repeated bytes inserted_rows = 2;
    repeated bytes updated_rows  = 3;

    // If the table PK is handle, we can only save the id of the deleted row.
    repeated int64 deleted_ids   = 4;

    // If the table has PK but PK is not handle, we save the PK of the deleted row.
    repeated bytes deleted_pks   = 5;

    // If the table doesn't have PK, we save the row value of the deleted row.
    repeated bytes deleted_rows  = 6;
}

message PrewriteValue {
    optional int64         schema_version = 1 [(gogoproto.nullable) = false];
    repeated TableMutation mutations      = 2 [(gogoproto.nullable) = false];
}

enum BinlogType {
    Prewrite = 0;
    Commit   = 1;
    Rollback = 2;
}

// Binlog contains all the changes in a transaction, which can be used to reconstruct SQL statement, then export to
// other systems.
message Binlog {
    optional BinlogType    tp             = 1 [(gogoproto.nullable) = false];

    // start_ts is used for all binlog Type, to pair prewrite log to commit log or rollback log.
    optional int64         start_ts       = 2 [(gogoproto.nullable) = false];

    // commit_ts is used only for binlog type Commit.
    optional int64         commit_ts      = 3 [(gogoproto.nullable) = false];

    // prewrite key is the primary key of the transaction, is used to check that the transaction is
    // commited or not if it failed to pair to commit log or rollback log within a time window.
    optional bytes         prewrite_key   = 4;

    // prewrite_data is marshalled from PrewriteData type,
    // we do not need to unmarshal prewrite data before the binlog have been successfully paired.
    optional bytes         prewrite_value = 5;
}
